# ITERATIVE METHOD
___________________________________________________________________
int search(vector<int>& nums, int target) {
    int low=0,high=nums.size()-1;
    while(low<=high){
        int mid = low+(high-low)/2;
        if(nums[mid]==target) return mid;
        else if(nums[mid]>target) high=mid-1;
        else low=mid+1;
    }
    return -1;
}

#RECURSIVE METHOD
_______________________________________________________________________

int f(int low,int high, vector<int>& nums,int target){
    if(low>high) return -1;
    int mid = low+(high-low)/2;
    if(nums[mid]==target) return mid;
    else if(nums[mid]<target) return f(mid+1,high,nums,target);
    else return f(low,mid-1,nums,target);
}


#LOWER BOUND
_______________________________________________________________________________

int lowerBound(vector<int> arr, int n, int x) {
	int low=0,high=n-1,ans=-1;
	while(low<=high){
		int mid = low+(high-low)/2;
		if(arr[mid]==x){
			ans=mid; high=mid-1;
		}
		else if(arr[mid]<x) low = mid+1;
		else high=mid-1;
	}
	if(ans==-1) return low;
	return ans;
}

#upper_bound
______________________________________________________________________________________

int upperBound(vector<int> &arr, int x, int n){
	int low =0,high=n-1,ans=n;
	while(low<=high){
		int mid = low+(high-low)/2;
		if(arr[mid]>x){
			ans=mid;
			high=mid-1;
		}
		else low=mid+1;
	}
	return ans;
}
