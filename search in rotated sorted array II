# this is near about same as like as search in rotated sorted array , in this duplicates are allowed, 
this can be handle , its the edge case like 3, 3, 1,2 ,3,3
we can trim the search space by checking the left and right , but in duplicates we cann't judge it
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

bool search(vector<int>& nums, int target) {
        int low =0 ,high=nums.size()-1;
        while(low<=high){
            int mid = low+(high-low)/2;
            if(nums[mid]==target) return true;
            if(nums[mid]==nums[low] && nums[mid]==nums[high]){
                low++; high--; continue;
            }
            if(nums[low]<=nums[mid]){
                if(target>=nums[low] &&  target<nums[mid]) high=mid-1;
                else low=mid+1;
            }
            else{
                if(target<=nums[high] && target>nums[mid])low=mid+1;
                else high=mid-1;
            }
        }
        return false;
    }
  _________________________________________________________________________________________________________________________________________
